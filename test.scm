(add-load-path "src")
(import (rnrs)
	(db2)
	(srfi :19)
	(srfi :39)
	(srfi :64)
	(sagittarius control)
	(getopt)
	(match))

(define *select* (make-parameter #f))

(define (run-test server user pass)
  (test-begin "DB2 CLI")

  (test-assert "create-db2-env" (create-db2-env))
  (test-assert "db2-env?" (db2-env? (create-db2-env)))

  (let* ((env (create-db2-env))
	 (conn (db2-connect! env server user pass)))
    (test-assert "connection?" (db2-connection? conn))
    (test-assert "open?" (db2-connection-open? conn))
    (let ((st (db2-prepare conn "select * from table where id = ?")))
      (test-assert "statement?" (db2-statement? st))
      (test-equal "num-params" 1 (db2-num-params st))
      (test-assert "statement open?" (db2-statement-open? st))
      (db2-free-handle! st))

    (test-assert "disconnect!" (db2-disconnect! conn))
    (test-assert "open? (closed)" (not (db2-connection-open? conn)))
    (test-assert "free" (db2-free-handle! conn))
    (test-assert "free" (db2-free-handle! env)))

  ;; run select
  (when (*select*)
    (let* ((env (create-db2-env))
	   (conn (db2-connect! env server user pass)))
      (call-with-input-file (*select*)
	(lambda (in)
	  (let loop ((p (read in)))
	    (unless (eof-object? p)
	      (match p
		((sql params column-names expects)
		 (let ((stmt (db2-prepare conn sql)))
		   (let loop2 ((params params) (i 1))
		     (unless (null? params)
		       (db2-bind-parameter! stmt i (car params))
		       (loop2 (cdr params) (+ i 1))))
		   (test-assert "execute" (db2-execute! stmt))
		   (test-equal "column count" (vector-length column-names)
			       (db2-column-count stmt))
		   (test-assert "fetch!" (db2-fetch! stmt))
		   (dotimes (i (db2-column-count stmt))
		     (let ((d (db2-get-data stmt (+ i 1))))
		       (test-equal (format "get-data [~a:~a]" 
					   (vector-ref column-names i)
					   i)
				   (vector-ref expects i)
				   (cond ((date? d) (date->string d "~Y-~m-~d"))
					 (else d))))))))
	      (loop (read in))))))
      (test-assert "free" (db2-free-handle! conn))
      (test-assert "free" (db2-free-handle! env))))

  (test-end))

(define (usage)
  (print "test.scm [OPTIONS] DB HOSTNAME USER PASS")
  (print "  Options:")
  (print "   -s,--select  select file for testing")
  (exit -1))

(define (main args)
  (with-args (cdr args)
      ((select (#\s "select")   #t #f)
       . rest)
    (match rest
      ((db host user pass)
       (parameterize ((*select* select))
	 (run-test (db2-construct-dns db :host host) user pass)))
      (_ (usage)))))
